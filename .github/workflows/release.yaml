name: Create and publish a release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to release'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    name: Create and publish a release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=semver,pattern={{version}},value=v${{ github.event.inputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm/v7

      - name: Set Version in docker-compose.yml
        uses: fjogeleit/yaml-update-action@v0.12.3
        with:
          valueFile: docker/prod/docker-compose.yml
          propertyPath: 'services.observer.image'
          value: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
          commitChange: false

      - name: Create Tag and Scripts Asset
        run: |
          git config --global user.email "buildmanager@salex.org"
          git config --global user.name "Bob the Builder"
          git add docker/prod/docker-compose.yml
          git commit -m "updating version to ${{ github.event.inputs.version }} in docker-compose"
          git tag -a v${{ github.event.inputs.version }} -m "tagging version ${{ github.event.inputs.version }}"
          git push --tags
          mkdir bin
          tar cfvz ./bin/scripts.tar.gz -C docker/prod .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            Release v${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload Scripts Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/scripts.tar.gz
          asset_name: scripts.tar.gz
          asset_content_type: application/gzip