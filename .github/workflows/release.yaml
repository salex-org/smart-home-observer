name: Create and publish release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to release'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create a release
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update version
        run: |
          cat <<< "$(yq '.appVersion = "${{ github.event.inputs.version }}" | .version = "${{ github.event.inputs.version }}"' ./deployments/kubernetes/helm/observer/Chart.yaml)" > ./deployments/kubernetes/helm/observer/Chart.yaml

      - name: Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "buildmanager@salex.org"
          git config --global user.name "Bob the Builder"
          git add deployments/kubernetes/helm/observer/Chart.yaml
          git commit -m "updating version to ${{ github.event.inputs.version }} in helm chart"
          git tag -a v${{ github.event.inputs.version }} -m "tagging version ${{ github.event.inputs.version }}"
          git push --tags

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: Release v${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker:
    needs: release
    name: Publish docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ github.event.inputs.version }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.23

      - name: Build Linux ARM v7
        run: | 
          CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=7 go build -a -o bin/linux/arm/v7/observer cmd/main.go

      - name: Build Linux ARM64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -o bin/linux/arm64/observer cmd/main.go

      - name: Build Linux AMD64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o bin/linux/amd64/observer cmd/main.go

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=semver,pattern={{version}},value=v${{ github.event.inputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./prod.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm/v7,linux/arm64,linux/amd64
  publish-helm:
    needs:
      - publish-docker
    name: Publish helm chart
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          ref: v${{ github.event.inputs.version }}

      - name: Set up Helm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: azure/setup-helm@v3

      - name: Helm dependency update
        run: helm dependency update deployments/kubernetes/helm/observer

      - name: Push Helm chart
        uses: bsord/helm-push@v4.2.0
        with:
          useOCIRegistry: true
          registry-url: oci://${{ env.REGISTRY }}/${{ github.repository }}
          username: ${{ github.actor }}
          access-token: ${{ secrets.GITHUB_TOKEN }}
          force: true
          chart-folder: deployments/kubernetes/helm/observer